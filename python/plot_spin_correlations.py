import os
import sys
import numpy as np
from scipy.spatial.distance import euclidean as distance
from operator import itemgetter

import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.patches as patches
import matplotlib.gridspec as gridspec
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import matplotlib.ticker as mtick

sys.path.insert(0, os.getcwd() + "/../")
from combine_mc_data import combine_mc_data
from bootstrap import bootstrap

####
####
####
def niceCmap ():
  import numpy as np
  from matplotlib.colors import ListedColormap
  colors = [[0.0, 0.0022483167461726087, 0.004636218999997375, 0.00716124611065693, 0.009820952581387491, 0.01261290806947886, 0.015534697386274419, 0.018583920497171138, 0.021758192521619573, 0.025055143733123862, 0.028472419559241714, 0.03200768058158445, 0.035658602535816965, 0.03942287631165772, 0.04329820795287879, 0.0472823186573058, 0.05137294477681798, 0.05556783781734816, 0.05986476443888273, 0.06426150645546164, 0.0687558608351785, 0.07334563970018045, 0.0780286703266682, 0.08280279514489608, 0.087665871739172, 0.09261577284785744, 0.09765038636336744, 0.10276761533217074, 0.10796537795478948, 0.11324160758579956, 0.11859425273383035, 0.12402127706156482, 0.12952065938573962, 0.13509039367714484, 0.14072848906062424, 0.14643296981507523, 0.15220187537344856, 0.15803326032274886, 0.1639251944040342, 0.16987576251241618, 0.1758830646970601, 0.18194521616118478, 0.1880603472620627, 0.1942266035110198, 0.2004421455734356, 0.2067051492687434, 0.21301380557042987, 0.2193663206060355, 0.22576091565715398, 0.23219582715943296, 0.23866930670257355, 0.24517962103033047, 0.25172505204051177, 0.2583038967849794, 0.264914467469649, 0.27155509145448936, 0.278224111253523, 0.28491988453482625, 0.291640784120529, 0.2983851979868144, 0.3051515292639194, 0.31193819623613456, 0.3187436323418041, 0.3255662861733256, 0.33240462147715016, 0.33925711715378293, 0.34612226725778217, 0.3529985809977602, 0.3598845827363822, 0.36677881199036755, 0.3736798234304892, 0.3805861868815733, 0.38749648732249975, 0.3944093248862023, 0.4013233148596679, 0.4082370876839375, 0.415149288954105, 0.4220585794193186, 0.4289636349827796, 0.435863146701743, 0.4427558207875173, 0.44964037860546513, 0.45651555667500193, 0.46338010666959734, 0.4702327954167741, 0.47707240489810876, 0.48389773224923155, 0.4907075897598261, 0.49750080487362963, 0.5042762201884333, 0.5110326934560814, 0.517769097582472, 0.5244843206275566, 0.5311772658053405, 0.537846851483883, 0.5444920111852956, 0.5511116935857447, 0.55770486251545, 0.5642704969586844, 0.5708075910537749, 0.5773151540931015, 0.5837922105230983, 0.5902377999442527, 0.5966509771111057, 0.6030308119322517, 0.6093763894703397, 0.6156868099420707, 0.6219611887182008, 0.6281986563235384, 0.6343983584369464, 0.6405594558913409, 0.6466811246736912, 0.6527625559250215, 0.658802955940408, 0.6648015461689811, 0.6707575632139259, 0.6766702588324787, 0.6825388999359315, 0.6883627685896292, 0.6941411620129697, 0.6998733925794052, 0.7055587878164418, 0.7111966904056383, 0.7167864581826068, 0.7223274641370145, 0.7278190964125814, 0.7332607583070802, 0.7386518682723384, 0.7439918599142366, 0.7492801819927093, 0.7545162984217442, 0.7596996882693827, 0.7648298457577196, 0.7699062802629042, 0.774928516315138, 0.7798960935986765, 0.7848085669518297, 0.7896655063669603, 0.7944664969904848, 0.7992111391228731, 0.8038990482186497, 0.8085298548863907, 0.8131032048887277, 0.8176187591423447, 0.8220761937179799, 0.826475199840425, 0.8308154838885253, 0.8350967673951792, 0.8393187870473393, 0.8434812946860117, 0.8475840573062556, 0.851626857057184, 0.855609491241964, 0.8595317723178157, 0.8633935278960128, 0.8671946007418831, 0.8709348487748075, 0.8746141450682197, 0.8782323778496096, 0.8817894505005176, 0.8852852815565402, 0.8887198047073254, 0.8920929687965757, 0.8954047378220484, 0.8986550909355511, 0.9018440224429496, 0.9049715418041593, 0.9080376736331501, 0.9110424576979479, 0.9139859489206283, 0.9168682173773239, 0.9196893482982191, 0.9224494420675525, 0.925148614223615, 0.927786995458754, 0.9303647316193664, 0.9328819837059066, 0.9353389278728804, 0.9377357554288483, 0.940072672836422, 0.9423499017122705, 0.9445676788271137, 0.946726256105725, 0.9488259006269335, 0.9508668946236196, 0.9528495354827189, 0.9547741357452195, 0.956641023106165, 0.9584505404146494, 0.9602030456738216, 0.9618989120408855, 0.9635385278270989, 0.965122296497769, 0.9666506366722616, 0.9681239821239936, 0.9695427817804354, 0.9709074997231111, 0.9722186151875989, 0.9734766225635304, 0.9746820313945915, 0.9758353663785198, 0.9769371673671081, 0.9779879893662031, 0.9789884025357027, 0.9799389921895618, 0.9808403587957846, 0.9816931179764343, 0.9824979005076213, 0.9832553523195167, 0.9839661344963389, 0.9846309232763639, 0.9852504100519197, 0.9858253013693858, 0.9863563189292013, 0.9868441995858521, 0.9872896953478822, 0.9876935733778875, 0.9880566159925175, 0.9883796206624749, 0.9886634000125167, 0.9889087818214548, 0.9891166090221504, 0.9892877397015236, 0.9894230471005452, 0.9895234196142391, 0.9895897607916841, 0.9896229893360127, 0.9896240391044084, 0.989593859108111, 0.9895334135124159, 0.9894436816366678, 0.9893256579542644, 0.9891803520926625, 0.9890087888333661, 0.9888120081119358, 0.988591065017989, 0.9883470297951915, 0.9880809878412646, 0.9877940397079827, 0.9874873011011767, 0.9871619028807244, 0.9868189910605665, 0.9864597268086892, 0.9860852864471354, 0.9856968614520034, 0.9852956584534405, 0.984882899235652, 0.9844598207368964, 0.9840276750494814, 0.9835877294197752, 0.9831412662481918, 0.9826895830892033, 0.9822339926513384, 0.9817758227971716, 0.9813164165433377, 0.9808571320605233], [0.0, 0.0020292338374934544, 0.00399521776611905, 0.005899748230172122, 0.00774460786819744, 0.009531565512989205, 0.01126237619159105, 0.012938781125296032, 0.014562507729646653, 0.016135269614434844, 0.01765876658370195, 0.019134684635738777, 0.020564695963085543, 0.021950458952531896, 0.023293618185116938, 0.024595804436129166, 0.025858634675106542, 0.02708371206583645, 0.028272625966355706, 0.02942695192895054, 0.030548251700156643, 0.03163807322075913, 0.03269795062579251, 0.033729404244540795, 0.03473394060053737, 0.03571305241156507, 0.03666821858965616, 0.03760090424109235, 0.03851256066640476, 0.03940462536037397, 0.04027852201202997, 0.04113566050465218, 0.04197743691576946, 0.04280523351716009, 0.04362041877485182, 0.0444243473491218, 0.04521836009449658, 0.046003784059752195, 0.046781932487914124, 0.04755410481625723, 0.04832158667630581, 0.04908564989383363, 0.04984755248886384, 0.050608538675669085, 0.05136983886277138, 0.05213266965294221, 0.05289823384320246, 0.053667720424822506, 0.05444230458332206, 0.05522314769847036, 0.05601139734428603, 0.05680818728903711, 0.05761463749524114, 0.05843185411966501, 0.05926092951332509, 0.06010294222148717, 0.06095895698366648, 0.061830024733627656, 0.06271718259938477, 0.06362145390320142, 0.06454384816159045, 0.06548536108531429, 0.06644697457938478, 0.06742965674306312, 0.06843436186986, 0.06946203044753554, 0.07051358915809924, 0.07158995087781013, 0.07269201467717656, 0.07382066582095641, 0.07497677576815695, 0.0761612021720348, 0.0773747888800962, 0.07861836593409659, 0.07989274957004108, 0.08119874221818409, 0.08253713250302938, 0.08390869524333035, 0.08531419145208957, 0.0867543683365594, 0.08822995929824125, 0.08974168393288624, 0.09129024803049476, 0.0928763435753167, 0.0945006487458514, 0.09616382791484761, 0.09786653164930352, 0.09960939671046669, 0.10139304605383409, 0.1032180888291523, 0.10508512038041724, 0.1069947222458742, 0.1089474621580179, 0.11094389404359264, 0.11298455802359202, 0.11506998041325897, 0.11720067372208622, 0.11937713665381544, 0.12159985410643821, 0.12386929717219519, 0.1261859231375767, 0.12855017548332218, 0.13096248388442103, 0.13342326421011153, 0.13593291852388176, 0.1384918350834689, 0.14110038834086003, 0.14375893894229122, 0.14646783372824812, 0.14922740573346593, 0.15203797418692927, 0.15489984451187197, 0.15781330832577745, 0.1607786434403785, 0.1637961138616576, 0.16686596978984622, 0.1699884476194255, 0.1731637699391261, 0.17639214553192806, 0.1796737693750607, 0.18300882264000287, 0.1863974726924829, 0.18983987309247843, 0.19333616359421685, 0.19688647014617452, 0.20049090489107746, 0.2041495661659012, 0.2078625385018706, 0.21162989262446003, 0.21545168545339308, 0.21932796010264313, 0.22325874588043265, 0.22724405828923358, 0.23128389902576768, 0.23537825598100545, 0.2395271032401676, 0.2437304010827237, 0.24798809598239302, 0.2523001206071442, 0.25666639381919526, 0.26108682067501376, 0.26556129242531634, 0.27008968651507, 0.27467186658348985, 0.2793076824640413, 0.28399697018443926, 0.2887395519666473, 0.29353523622687944, 0.2983838175755985, 0.30328507681751693, 0.30823878095159646, 0.31324468317104825, 0.3183025228633327, 0.32341202561016047, 0.32857290318749105, 0.33378485356553284, 0.33904756090874477, 0.3443606955758348, 0.34972391411975967, 0.3551368592877261, 0.36059916002119086, 0.36611043145585903, 0.37167027492168553, 0.3772782779428748, 0.3829340142378812, 0.3886370437194075, 0.3943869124944062, 0.4001831528640805, 0.4060252833238807, 0.41191280856350904, 0.41784521946691455, 0.4238219931122984, 0.42984259277210946, 0.4359064679130463, 0.4420130541960574, 0.4481617734763398, 0.45435203380334077, 0.46058322942075713, 0.46685474076653444, 0.4731659344728685, 0.47951616336620384, 0.4859047664672343, 0.49233106899090373, 0.49879438234640494, 0.5052940041371813, 0.511829218160924, 0.5183992944095742, 0.525003489069323, 0.5316410445206112, 0.538311189338127, 0.5450131382908114, 0.5517460923418513, 0.5585092386486856, 0.5653017505630012, 0.5721227876307345, 0.5789714955920727, 0.585847006381451, 0.592748438127555, 0.5996748951533183, 0.6066254679759249, 0.6135992333068099, 0.6205952540516534, 0.6276125793103898, 0.6346502443772005, 0.6417072707405165, 0.6487826660830175, 0.6558754242816343, 0.6629845254075463, 0.6701089357261818, 0.6772476076972197, 0.6843994799745873, 0.6915634774064622, 0.6987385110352711, 0.7059234780976891, 0.7131172620246425, 0.7203187324413058, 0.7275267451671031, 0.7347401422157092, 0.7419577517950454, 0.7491783883072859, 0.756400852348853, 0.7636239307104173, 0.7708463963768988, 0.7780670085274697, 0.7852845125355482, 0.7924976399688048, 0.7997051085891569, 0.8069056223527739, 0.8140978714100726, 0.8212805321057193, 0.8284522669786317, 0.8356117247619738, 0.842757540383163, 0.849888334963862, 0.8570027158199861, 0.8640992764616992, 0.871176596593412, 0.8782332421137893, 0.8852677651157416, 0.89227870388643, 0.899264582907267, 0.9062239128539096, 0.9131551905962709, 0.9200568991985066, 0.9269275079190273, 0.9337654722104908, 0.9405692337198024, 0.9473372202881197, 0.9540678459508516, 0.9607595109376492, 0.9674106016724202, 0.9740194907733177, 0.9805845370527464, 0.9871040855173606, 0.9935764673680604, 1.0], [0.0, 0.010488442482384636, 0.02088226237347051, 0.03117961708945865, 0.04137869933481612, 0.051477737102276, 0.06147499367283742, 0.07136876761576552, 0.08115739278859146, 0.09083923833711244, 0.10041270869539165, 0.10987624358575836, 0.11922831801880784, 0.12846744229340137, 0.13759216199666635, 0.14660105800399603, 0.15549274647904984, 0.16426587887375316, 0.17291914192829747, 0.18145125767114012, 0.1898609834190047, 0.19814711177688069, 0.20630847063802363, 0.21434392318395504, 0.2222523678844625, 0.23003273849759973, 0.23768400406968626, 0.2452051689353078, 0.2525952727173161, 0.2598533903268288, 0.26697863196322963, 0.2739701431141684, 0.2808271045555609, 0.28754873235158895, 0.2941342778547005, 0.3005830277056093, 0.3068943038332953, 0.31306746345500436, 0.31910189907624853, 0.32499703849080586, 0.3307523447807201, 0.33636731631630146, 0.34184148675612613, 0.3471744250470361, 0.3523657354241393, 0.35741505741081003, 0.36232206581868853, 0.36708647074768086, 0.3717080175859592, 0.376186487009962, 0.38052169498439337, 0.38471349276222366, 0.3887617668846892, 0.3926664391812923, 0.39642746676980145, 0.40004484205625096, 0.4035185927349413, 0.40684878178843875, 0.410035507487576, 0.4130789033914516, 0.4159791383474299, 0.4187364164911416, 0.42135097724648324, 0.42382309532561746, 0.42615308072897284, 0.428341278745244, 0.43038806995139184, 0.43229387021264293, 0.43405913068249014, 0.43568433780269206, 0.43717001330327343, 0.4385167142025254, 0.4397250328070047, 0.4407955967115341, 0.44172906879920254, 0.44252614724136485, 0.4431875654976423, 0.4437140923159215, 0.44410653173235576, 0.44436572307136396, 0.4444925409456313, 0.4444878952561087, 0.44435273119201335, 0.44408802923082846, 0.44369480513830295, 0.4431741099684523, 0.44252703006355776, 0.44175468705416615, 0.44085823785909123, 0.43983887468541194, 0.4386978250284739, 0.43743635167188827, 0.4360557526875325, 0.43455736143555007, 0.4329425465643503, 0.4312127120106085, 0.4293692969992665, 0.4274137760435316, 0.42534765894487736, 0.4231724907930434, 0.4208898519660352, 0.4185013581301244, 0.41600866023984867, 0.413413444538012, 0.4107174325556834, 0.40792238111219925, 0.40503008231516074, 0.4020423635604362, 0.3989610875321589, 0.3957881522027291, 0.3925254908328123, 0.3891750719713407, 0.38573889945551204, 0.38221901241079026, 0.3786174852509052, 0.37493642767785296, 0.3711779846818958, 0.3673443365415615, 0.36343769882364385, 0.3594603223832033, 0.355414493363566, 0.351302533196324, 0.34712679860133555, 0.34288968158672445, 0.33859360944888156, 0.33424104477246247, 0.3298344854303902, 0.32537646458385217, 0.3208695506823035, 0.31631634746346377, 0.3117194939533203, 0.30708166446612467, 0.3024055686043959, 0.2976939512589177, 0.29294959260874154, 0.288175308121183, 0.2833739485518255, 0.27854839994451686, 0.2737015836313723, 0.26883645623277164, 0.2639560096573619, 0.2590632711020564, 0.25416130305203277, 0.24925320328073652, 0.24434210484987806, 0.23943117610943399, 0.23452362069764765, 0.22962267754102716, 0.22473162085434828, 0.21985376014065083, 0.2149924401912422, 0.21015104108569582, 0.20533297819184992, 0.20054170216581035, 0.1957806989519466, 0.19105348978289727, 0.18636363117956467, 0.18171471495111824, 0.17711036819499226, 0.17255425329688934, 0.16805006793077515, 0.1636015450588838, 0.15921245293171404, 0.15488659508803182, 0.15062781035486728, 0.14643997284751875, 0.14232699196954912, 0.138292812412788, 0.13434141415733003, 0.13047681247153764, 0.1267030579120374, 0.12302423632372372, 0.11944446883975512, 0.1159679118815573, 0.1125987571588225, 0.10934123166950704, 0.106199597699836, 0.10317815282429832, 0.10028122990564903, 0.09751319709491058, 0.09487845783137039, 0.09238145084258198, 0.09002665014436606, 0.0878185650408072, 0.08576174012425763, 0.08386075527533543, 0.08212022566292432, 0.08054480174417455, 0.07913916926450071, 0.07790804925758565, 0.07685619804537769, 0.07598840723809053, 0.07530950373420398, 0.0748243497204637, 0.07453784267188368, 0.07445491535173909, 0.07458053581157609, 0.07491970739120468, 0.0754774687186992, 0.07625889371040406, 0.0772690915709271, 0.07851320679314222, 0.07999641915818856, 0.08172394373547531, 0.08370103088267022, 0.08593296624571689, 0.08842507075881656, 0.09118270064443923, 0.09421124741332365, 0.09751613786447066, 0.10110283408514897, 0.10497683345089337, 0.10914366862550384, 0.11360890756104824, 0.11837815349785785, 0.12345704496453092, 0.128851255777934, 0.13456649504319618, 0.14060850715371487, 0.14698307179115222, 0.15369600392543736, 0.16075315381476551, 0.1681604070055971, 0.1759236843326577, 0.1840489419189426, 0.1925421711757087, 0.20140939880248165, 0.2106566867870523, 0.22029013240547757, 0.2303158682220814, 0.24074006208945065, 0.2515689171484432, 0.2628086718281768, 0.2744655998460406, 0.28654601020768844, 0.2990562472070373, 0.31200269042627404, 0.32539175473585047, 0.33922989029448036, 0.3535235825491503, 0.368279352235108, 0.38350375537587134, 0.3992033832832176, 0.41538486255719587, 0.43205485508612096, 0.4492200580465715, 0.4668872039033909, 0.4850630604096944, 0.5037544306068549, 0.5229681528245189, 0.542711100680596, 0.5629901830812605, 0.5838123442209575, 0.6051845635823874, 0.627113855936531, 0.6496072713426235]]
  cmap = ListedColormap(np.array(colors).transpose())

  return cmap

####
####
####
def niceCmap_r ():
  import numpy as np
  from matplotlib.colors import ListedColormap
  colors = [[0.0, 0.0022483167461726087, 0.004636218999997375, 0.00716124611065693, 0.009820952581387491, 0.01261290806947886, 0.015534697386274419, 0.018583920497171138, 0.021758192521619573, 0.025055143733123862, 0.028472419559241714, 0.03200768058158445, 0.035658602535816965, 0.03942287631165772, 0.04329820795287879, 0.0472823186573058, 0.05137294477681798, 0.05556783781734816, 0.05986476443888273, 0.06426150645546164, 0.0687558608351785, 0.07334563970018045, 0.0780286703266682, 0.08280279514489608, 0.087665871739172, 0.09261577284785744, 0.09765038636336744, 0.10276761533217074, 0.10796537795478948, 0.11324160758579956, 0.11859425273383035, 0.12402127706156482, 0.12952065938573962, 0.13509039367714484, 0.14072848906062424, 0.14643296981507523, 0.15220187537344856, 0.15803326032274886, 0.1639251944040342, 0.16987576251241618, 0.1758830646970601, 0.18194521616118478, 0.1880603472620627, 0.1942266035110198, 0.2004421455734356, 0.2067051492687434, 0.21301380557042987, 0.2193663206060355, 0.22576091565715398, 0.23219582715943296, 0.23866930670257355, 0.24517962103033047, 0.25172505204051177, 0.2583038967849794, 0.264914467469649, 0.27155509145448936, 0.278224111253523, 0.28491988453482625, 0.291640784120529, 0.2983851979868144, 0.3051515292639194, 0.31193819623613456, 0.3187436323418041, 0.3255662861733256, 0.33240462147715016, 0.33925711715378293, 0.34612226725778217, 0.3529985809977602, 0.3598845827363822, 0.36677881199036755, 0.3736798234304892, 0.3805861868815733, 0.38749648732249975, 0.3944093248862023, 0.4013233148596679, 0.4082370876839375, 0.415149288954105, 0.4220585794193186, 0.4289636349827796, 0.435863146701743, 0.4427558207875173, 0.44964037860546513, 0.45651555667500193, 0.46338010666959734, 0.4702327954167741, 0.47707240489810876, 0.48389773224923155, 0.4907075897598261, 0.49750080487362963, 0.5042762201884333, 0.5110326934560814, 0.517769097582472, 0.5244843206275566, 0.5311772658053405, 0.537846851483883, 0.5444920111852956, 0.5511116935857447, 0.55770486251545, 0.5642704969586844, 0.5708075910537749, 0.5773151540931015, 0.5837922105230983, 0.5902377999442527, 0.5966509771111057, 0.6030308119322517, 0.6093763894703397, 0.6156868099420707, 0.6219611887182008, 0.6281986563235384, 0.6343983584369464, 0.6405594558913409, 0.6466811246736912, 0.6527625559250215, 0.658802955940408, 0.6648015461689811, 0.6707575632139259, 0.6766702588324787, 0.6825388999359315, 0.6883627685896292, 0.6941411620129697, 0.6998733925794052, 0.7055587878164418, 0.7111966904056383, 0.7167864581826068, 0.7223274641370145, 0.7278190964125814, 0.7332607583070802, 0.7386518682723384, 0.7439918599142366, 0.7492801819927093, 0.7545162984217442, 0.7596996882693827, 0.7648298457577196, 0.7699062802629042, 0.774928516315138, 0.7798960935986765, 0.7848085669518297, 0.7896655063669603, 0.7944664969904848, 0.7992111391228731, 0.8038990482186497, 0.8085298548863907, 0.8131032048887277, 0.8176187591423447, 0.8220761937179799, 0.826475199840425, 0.8308154838885253, 0.8350967673951792, 0.8393187870473393, 0.8434812946860117, 0.8475840573062556, 0.851626857057184, 0.855609491241964, 0.8595317723178157, 0.8633935278960128, 0.8671946007418831, 0.8709348487748075, 0.8746141450682197, 0.8782323778496096, 0.8817894505005176, 0.8852852815565402, 0.8887198047073254, 0.8920929687965757, 0.8954047378220484, 0.8986550909355511, 0.9018440224429496, 0.9049715418041593, 0.9080376736331501, 0.9110424576979479, 0.9139859489206283, 0.9168682173773239, 0.9196893482982191, 0.9224494420675525, 0.925148614223615, 0.927786995458754, 0.9303647316193664, 0.9328819837059066, 0.9353389278728804, 0.9377357554288483, 0.940072672836422, 0.9423499017122705, 0.9445676788271137, 0.946726256105725, 0.9488259006269335, 0.9508668946236196, 0.9528495354827189, 0.9547741357452195, 0.956641023106165, 0.9584505404146494, 0.9602030456738216, 0.9618989120408855, 0.9635385278270989, 0.965122296497769, 0.9666506366722616, 0.9681239821239936, 0.9695427817804354, 0.9709074997231111, 0.9722186151875989, 0.9734766225635304, 0.9746820313945915, 0.9758353663785198, 0.9769371673671081, 0.9779879893662031, 0.9789884025357027, 0.9799389921895618, 0.9808403587957846, 0.9816931179764343, 0.9824979005076213, 0.9832553523195167, 0.9839661344963389, 0.9846309232763639, 0.9852504100519197, 0.9858253013693858, 0.9863563189292013, 0.9868441995858521, 0.9872896953478822, 0.9876935733778875, 0.9880566159925175, 0.9883796206624749, 0.9886634000125167, 0.9889087818214548, 0.9891166090221504, 0.9892877397015236, 0.9894230471005452, 0.9895234196142391, 0.9895897607916841, 0.9896229893360127, 0.9896240391044084, 0.989593859108111, 0.9895334135124159, 0.9894436816366678, 0.9893256579542644, 0.9891803520926625, 0.9890087888333661, 0.9888120081119358, 0.988591065017989, 0.9883470297951915, 0.9880809878412646, 0.9877940397079827, 0.9874873011011767, 0.9871619028807244, 0.9868189910605665, 0.9864597268086892, 0.9860852864471354, 0.9856968614520034, 0.9852956584534405, 0.984882899235652, 0.9844598207368964, 0.9840276750494814, 0.9835877294197752, 0.9831412662481918, 0.9826895830892033, 0.9822339926513384, 0.9817758227971716, 0.9813164165433377, 0.9808571320605233], [0.0, 0.0020292338374934544, 0.00399521776611905, 0.005899748230172122, 0.00774460786819744, 0.009531565512989205, 0.01126237619159105, 0.012938781125296032, 0.014562507729646653, 0.016135269614434844, 0.01765876658370195, 0.019134684635738777, 0.020564695963085543, 0.021950458952531896, 0.023293618185116938, 0.024595804436129166, 0.025858634675106542, 0.02708371206583645, 0.028272625966355706, 0.02942695192895054, 0.030548251700156643, 0.03163807322075913, 0.03269795062579251, 0.033729404244540795, 0.03473394060053737, 0.03571305241156507, 0.03666821858965616, 0.03760090424109235, 0.03851256066640476, 0.03940462536037397, 0.04027852201202997, 0.04113566050465218, 0.04197743691576946, 0.04280523351716009, 0.04362041877485182, 0.0444243473491218, 0.04521836009449658, 0.046003784059752195, 0.046781932487914124, 0.04755410481625723, 0.04832158667630581, 0.04908564989383363, 0.04984755248886384, 0.050608538675669085, 0.05136983886277138, 0.05213266965294221, 0.05289823384320246, 0.053667720424822506, 0.05444230458332206, 0.05522314769847036, 0.05601139734428603, 0.05680818728903711, 0.05761463749524114, 0.05843185411966501, 0.05926092951332509, 0.06010294222148717, 0.06095895698366648, 0.061830024733627656, 0.06271718259938477, 0.06362145390320142, 0.06454384816159045, 0.06548536108531429, 0.06644697457938478, 0.06742965674306312, 0.06843436186986, 0.06946203044753554, 0.07051358915809924, 0.07158995087781013, 0.07269201467717656, 0.07382066582095641, 0.07497677576815695, 0.0761612021720348, 0.0773747888800962, 0.07861836593409659, 0.07989274957004108, 0.08119874221818409, 0.08253713250302938, 0.08390869524333035, 0.08531419145208957, 0.0867543683365594, 0.08822995929824125, 0.08974168393288624, 0.09129024803049476, 0.0928763435753167, 0.0945006487458514, 0.09616382791484761, 0.09786653164930352, 0.09960939671046669, 0.10139304605383409, 0.1032180888291523, 0.10508512038041724, 0.1069947222458742, 0.1089474621580179, 0.11094389404359264, 0.11298455802359202, 0.11506998041325897, 0.11720067372208622, 0.11937713665381544, 0.12159985410643821, 0.12386929717219519, 0.1261859231375767, 0.12855017548332218, 0.13096248388442103, 0.13342326421011153, 0.13593291852388176, 0.1384918350834689, 0.14110038834086003, 0.14375893894229122, 0.14646783372824812, 0.14922740573346593, 0.15203797418692927, 0.15489984451187197, 0.15781330832577745, 0.1607786434403785, 0.1637961138616576, 0.16686596978984622, 0.1699884476194255, 0.1731637699391261, 0.17639214553192806, 0.1796737693750607, 0.18300882264000287, 0.1863974726924829, 0.18983987309247843, 0.19333616359421685, 0.19688647014617452, 0.20049090489107746, 0.2041495661659012, 0.2078625385018706, 0.21162989262446003, 0.21545168545339308, 0.21932796010264313, 0.22325874588043265, 0.22724405828923358, 0.23128389902576768, 0.23537825598100545, 0.2395271032401676, 0.2437304010827237, 0.24798809598239302, 0.2523001206071442, 0.25666639381919526, 0.26108682067501376, 0.26556129242531634, 0.27008968651507, 0.27467186658348985, 0.2793076824640413, 0.28399697018443926, 0.2887395519666473, 0.29353523622687944, 0.2983838175755985, 0.30328507681751693, 0.30823878095159646, 0.31324468317104825, 0.3183025228633327, 0.32341202561016047, 0.32857290318749105, 0.33378485356553284, 0.33904756090874477, 0.3443606955758348, 0.34972391411975967, 0.3551368592877261, 0.36059916002119086, 0.36611043145585903, 0.37167027492168553, 0.3772782779428748, 0.3829340142378812, 0.3886370437194075, 0.3943869124944062, 0.4001831528640805, 0.4060252833238807, 0.41191280856350904, 0.41784521946691455, 0.4238219931122984, 0.42984259277210946, 0.4359064679130463, 0.4420130541960574, 0.4481617734763398, 0.45435203380334077, 0.46058322942075713, 0.46685474076653444, 0.4731659344728685, 0.47951616336620384, 0.4859047664672343, 0.49233106899090373, 0.49879438234640494, 0.5052940041371813, 0.511829218160924, 0.5183992944095742, 0.525003489069323, 0.5316410445206112, 0.538311189338127, 0.5450131382908114, 0.5517460923418513, 0.5585092386486856, 0.5653017505630012, 0.5721227876307345, 0.5789714955920727, 0.585847006381451, 0.592748438127555, 0.5996748951533183, 0.6066254679759249, 0.6135992333068099, 0.6205952540516534, 0.6276125793103898, 0.6346502443772005, 0.6417072707405165, 0.6487826660830175, 0.6558754242816343, 0.6629845254075463, 0.6701089357261818, 0.6772476076972197, 0.6843994799745873, 0.6915634774064622, 0.6987385110352711, 0.7059234780976891, 0.7131172620246425, 0.7203187324413058, 0.7275267451671031, 0.7347401422157092, 0.7419577517950454, 0.7491783883072859, 0.756400852348853, 0.7636239307104173, 0.7708463963768988, 0.7780670085274697, 0.7852845125355482, 0.7924976399688048, 0.7997051085891569, 0.8069056223527739, 0.8140978714100726, 0.8212805321057193, 0.8284522669786317, 0.8356117247619738, 0.842757540383163, 0.849888334963862, 0.8570027158199861, 0.8640992764616992, 0.871176596593412, 0.8782332421137893, 0.8852677651157416, 0.89227870388643, 0.899264582907267, 0.9062239128539096, 0.9131551905962709, 0.9200568991985066, 0.9269275079190273, 0.9337654722104908, 0.9405692337198024, 0.9473372202881197, 0.9540678459508516, 0.9607595109376492, 0.9674106016724202, 0.9740194907733177, 0.9805845370527464, 0.9871040855173606, 0.9935764673680604, 1.0], [0.0, 0.010488442482384636, 0.02088226237347051, 0.03117961708945865, 0.04137869933481612, 0.051477737102276, 0.06147499367283742, 0.07136876761576552, 0.08115739278859146, 0.09083923833711244, 0.10041270869539165, 0.10987624358575836, 0.11922831801880784, 0.12846744229340137, 0.13759216199666635, 0.14660105800399603, 0.15549274647904984, 0.16426587887375316, 0.17291914192829747, 0.18145125767114012, 0.1898609834190047, 0.19814711177688069, 0.20630847063802363, 0.21434392318395504, 0.2222523678844625, 0.23003273849759973, 0.23768400406968626, 0.2452051689353078, 0.2525952727173161, 0.2598533903268288, 0.26697863196322963, 0.2739701431141684, 0.2808271045555609, 0.28754873235158895, 0.2941342778547005, 0.3005830277056093, 0.3068943038332953, 0.31306746345500436, 0.31910189907624853, 0.32499703849080586, 0.3307523447807201, 0.33636731631630146, 0.34184148675612613, 0.3471744250470361, 0.3523657354241393, 0.35741505741081003, 0.36232206581868853, 0.36708647074768086, 0.3717080175859592, 0.376186487009962, 0.38052169498439337, 0.38471349276222366, 0.3887617668846892, 0.3926664391812923, 0.39642746676980145, 0.40004484205625096, 0.4035185927349413, 0.40684878178843875, 0.410035507487576, 0.4130789033914516, 0.4159791383474299, 0.4187364164911416, 0.42135097724648324, 0.42382309532561746, 0.42615308072897284, 0.428341278745244, 0.43038806995139184, 0.43229387021264293, 0.43405913068249014, 0.43568433780269206, 0.43717001330327343, 0.4385167142025254, 0.4397250328070047, 0.4407955967115341, 0.44172906879920254, 0.44252614724136485, 0.4431875654976423, 0.4437140923159215, 0.44410653173235576, 0.44436572307136396, 0.4444925409456313, 0.4444878952561087, 0.44435273119201335, 0.44408802923082846, 0.44369480513830295, 0.4431741099684523, 0.44252703006355776, 0.44175468705416615, 0.44085823785909123, 0.43983887468541194, 0.4386978250284739, 0.43743635167188827, 0.4360557526875325, 0.43455736143555007, 0.4329425465643503, 0.4312127120106085, 0.4293692969992665, 0.4274137760435316, 0.42534765894487736, 0.4231724907930434, 0.4208898519660352, 0.4185013581301244, 0.41600866023984867, 0.413413444538012, 0.4107174325556834, 0.40792238111219925, 0.40503008231516074, 0.4020423635604362, 0.3989610875321589, 0.3957881522027291, 0.3925254908328123, 0.3891750719713407, 0.38573889945551204, 0.38221901241079026, 0.3786174852509052, 0.37493642767785296, 0.3711779846818958, 0.3673443365415615, 0.36343769882364385, 0.3594603223832033, 0.355414493363566, 0.351302533196324, 0.34712679860133555, 0.34288968158672445, 0.33859360944888156, 0.33424104477246247, 0.3298344854303902, 0.32537646458385217, 0.3208695506823035, 0.31631634746346377, 0.3117194939533203, 0.30708166446612467, 0.3024055686043959, 0.2976939512589177, 0.29294959260874154, 0.288175308121183, 0.2833739485518255, 0.27854839994451686, 0.2737015836313723, 0.26883645623277164, 0.2639560096573619, 0.2590632711020564, 0.25416130305203277, 0.24925320328073652, 0.24434210484987806, 0.23943117610943399, 0.23452362069764765, 0.22962267754102716, 0.22473162085434828, 0.21985376014065083, 0.2149924401912422, 0.21015104108569582, 0.20533297819184992, 0.20054170216581035, 0.1957806989519466, 0.19105348978289727, 0.18636363117956467, 0.18171471495111824, 0.17711036819499226, 0.17255425329688934, 0.16805006793077515, 0.1636015450588838, 0.15921245293171404, 0.15488659508803182, 0.15062781035486728, 0.14643997284751875, 0.14232699196954912, 0.138292812412788, 0.13434141415733003, 0.13047681247153764, 0.1267030579120374, 0.12302423632372372, 0.11944446883975512, 0.1159679118815573, 0.1125987571588225, 0.10934123166950704, 0.106199597699836, 0.10317815282429832, 0.10028122990564903, 0.09751319709491058, 0.09487845783137039, 0.09238145084258198, 0.09002665014436606, 0.0878185650408072, 0.08576174012425763, 0.08386075527533543, 0.08212022566292432, 0.08054480174417455, 0.07913916926450071, 0.07790804925758565, 0.07685619804537769, 0.07598840723809053, 0.07530950373420398, 0.0748243497204637, 0.07453784267188368, 0.07445491535173909, 0.07458053581157609, 0.07491970739120468, 0.0754774687186992, 0.07625889371040406, 0.0772690915709271, 0.07851320679314222, 0.07999641915818856, 0.08172394373547531, 0.08370103088267022, 0.08593296624571689, 0.08842507075881656, 0.09118270064443923, 0.09421124741332365, 0.09751613786447066, 0.10110283408514897, 0.10497683345089337, 0.10914366862550384, 0.11360890756104824, 0.11837815349785785, 0.12345704496453092, 0.128851255777934, 0.13456649504319618, 0.14060850715371487, 0.14698307179115222, 0.15369600392543736, 0.16075315381476551, 0.1681604070055971, 0.1759236843326577, 0.1840489419189426, 0.1925421711757087, 0.20140939880248165, 0.2106566867870523, 0.22029013240547757, 0.2303158682220814, 0.24074006208945065, 0.2515689171484432, 0.2628086718281768, 0.2744655998460406, 0.28654601020768844, 0.2990562472070373, 0.31200269042627404, 0.32539175473585047, 0.33922989029448036, 0.3535235825491503, 0.368279352235108, 0.38350375537587134, 0.3992033832832176, 0.41538486255719587, 0.43205485508612096, 0.4492200580465715, 0.4668872039033909, 0.4850630604096944, 0.5037544306068549, 0.5229681528245189, 0.542711100680596, 0.5629901830812605, 0.5838123442209575, 0.6051845635823874, 0.627113855936531, 0.6496072713426235]]
  cmap = ListedColormap(np.flip(np.array(colors), 1).transpose())

  return cmap

####
####
####
def drawEdge (ax, x1, x2, color):
  r = 0.5 * lineThickness
  dist = distance(x1, x2)

  phi = np.linspace(0, np.pi, 20)
  x = dist + r * np.cos(0.5*np.pi - phi)
  y = r * np.sin(0.5*np.pi - phi)
  x = np.concatenate((x, r * np.cos(-0.5*np.pi - phi)))
  y = np.concatenate((y, r * np.sin(-0.5*np.pi - phi)))

  # rotate
  theta = np.arctan2((x1[0] - x2[0]), (x1[1] - x2[1]))
  R = np.array(((np.cos(theta), -np.sin(theta)), (np.sin(theta), np.cos(theta))))
  X = np.matmul(R, np.stack((x, y), axis=0))

  # translate and plot
  ax.fill(x2[1] + X[0,:], x2[0] + X[1,:], color=color, zorder=1)

####
####
####
def orderedPairs (r0, r1):
  return sorted([np.array(r0), np.array(r1)], key=itemgetter(0, 1))

####
####
####
def symmetrizeData (C, index2sites):
  r_map = dict()

  for i in range(0, 4):
    for index, val in np.ndenumerate(C):
      r0, r1, isHole = index2sites(index)

      # rotate
      if i == 0: X = orderedPairs(r0, r1)
      if i == 1: X = orderedPairs([-r0[1] + L, r0[0]], [-r1[1] + L, r1[0]])
      if i == 2: X = orderedPairs([-r0[0] + L, -r0[1] + L], [-r1[0] + L, -r1[1] + L])
      if i == 3: X = orderedPairs([r0[1], -r0[0] + L], [r1[1], -r1[0] + L])

      if str(X) in r_map: r_map[str(X)][2] += [val]
      else:               r_map[str(X)]     = [X, isHole, [val]]


  # average
  data = []
  for key, val in r_map.items():
    data += [{
      "rs":      val[0],
      "isHole":  val[1],
      "val":     np.mean(val[2])
    }]


  return data

####
####
####
def drawSpatialCorrelations (canvas, ax, dataSet, dataLabel, holeIndices, index2sites, reversed = False):

  # combine data
  out = []
  for i in range(0, len(dataSet["avgSign"])):
    out += [np.array(dataSet[dataLabel][i]) * dataSet["avgSign"][i]]
  C = np.average(out, axis=0, weights=weights) / np.average(dataSet["avgSign"], axis=0, weights=weights)

  # symmetrize
  C = symmetrizeData(C, index2sites)

  # compute min/max values
  min_val = 100
  max_val = -100
  for item in C:
    if item["isHole"]: continue
    min_val = min(min_val, item["val"])
    max_val = max(max_val, item["val"])
  interval = max_val - min_val

  for item in sorted(C, key=itemgetter("val"), reverse=reversed):
    r0     = item["rs"][0]
    r1     = item["rs"][1]
    isHole = item["isHole"]
    val    = item["val"]

    # the physical position of the other end of the link
    r2 = r1 % L

    # the color according to the value
    if not isHole:
      if reversed: color = niceCmap_r()((val - min_val) / interval)
      else:        color = niceCmap()((val - min_val) / interval)
    else:
      continue

    # draw the link
    if not isHole:
      if r2[0] == r1[0] and r2[1] == r1[1]:
        # does not lie on the boundary
        drawEdge(canvas, r0 - O, r1 - O, color)

    # draw the site
    site = patches.Circle((r0[1] - o, r0[0] - o), siteRadius, color="gray", zorder=2)
    canvas.add_patch(site)

    # compute the closest possible distance from the hole
    s = distance(np.remainder(0.5*(r0 + r1), [L, L]), O)

  return min_val, max_val

####
#### isolate a single data type
####
def isolateData (dataSet, dataLabel):
  data_comb = {}
  for i in range(0, L * L * halfNumNNs):

    # convert global index to directional index
    inds = np.unravel_index(i, (L, L, halfNumNNs))

    d = {
      "index": inds,
      "v":  [],
      "s":  dataSet["avgSign"],
      "w":  dataSet["numData"]
    }

    # append values
    for arr in dataSet[dataLabel]: d["v"] += [arr[inds]]

    data_comb[inds] = d

  return data_comb

####
####
####
def plotRadialStatistics (ax, data, index2sites, xMax, label = False):

  ####
  #### project onto distance from hole
  ####
  data_s = {}
  for i, (index, val) in enumerate(data.items()):

    # calculate the position of the two spins
    r0, r1, isHole = index2sites(index)

    # if connected to the hole
    if isHole: continue

    # compute the closest possible distance from the hole
    s = distance(np.remainder(0.5*(r0 + r1), [L, L]), O)

    # collect radial MC data
    if s in data_s:
      data_s[s]["v"] = np.append(data_s[s]["v"], val["v"])
      data_s[s]["s"] = np.append(data_s[s]["s"], val["s"])
      data_s[s]["w"] = np.append(data_s[s]["w"], val["w"])
    else:
      data_s[s] = {
        "v": val["v"],
        "s": val["s"],
        "w": val["w"]
      }


  ####
  #### analyze and plot radial data
  ####
  x = []
  y = []
  err = []
  for s, d in sorted(data_s.items(), key=itemgetter(0)):

    # perform bootstrap for all data points within the frame
    if xMax == 0 or s < xMax:

      if label:
        print("bootstrapping: " + label + " at x=" + str(s) + " consisting of " + str(d["v"].size) + " data points")

      val, _err = bootstrap(lambda x: (x), [d["v"]], d["s"], d["w"], maxNumBootstrapIteration)
      x   += [s]
      y   += [val]
      err += [_err]

  ax.errorbar(x, y, yerr=err, zorder=2, **errorMarker)


  ####
  #### return xmin and xmax
  ####
  return x[0], x[-1]



####
####
####
jobNames = [
  "saved/19-09-18",
  "saved/19-09-22",
  "saved/19-09-23",
  "saved/19-09-26",
  "saved/19-12-03",
  "saved/19-12-11",
]
filter = {
  "L": 20,
  "betas": [22, 88]
}


####
#### application parameters
####
width = 3
siteSize = 2

siteRadius = 0.07
lineThickness = 0.2

fontSize = 14
axLabelSize = 17

zoom = 3.1

maxNumBootstrapIteration = 1000

errorMarker = {
  "marker":    "o",
  "ls":        ":",
  "capsize":    3,
  "lw":         1,
  "elinewidth": 1,
  "markersize": 4
}


####
#### collect and sort data
####
dataSets = combine_mc_data(jobNames, filter)
dataSets = list(dataSets.values())
dataSets.sort(key=lambda data: data["beta"])


####
#### create figure
####
fig = plt.figure(figsize=(7, 9))
plt.rc('font', size=fontSize)
plt.rc('font', weight='normal')
gs = gridspec.GridSpec(3, len(dataSets), wspace=0.3, hspace=0.4, left=0.09, bottom=0.08, right=0.98, top=0.96)


####
#### loop over data
####
for i, dataSet in enumerate(dataSets):
  ####
  #### create axes
  ####
  if dataSet["beta"] == 88:
    # beta = 88
    shift = 0.16 - 0.1
    y_shift = 0.02
  else:
    # beta = 22
    shift = 0.08 - 0.1
    y_shift = 0.02

  shift_bar = -0.06

  if dataSet["beta"] == 22:   xtra_shift_C1 = -0.06
  elif dataSet["beta"] == 88: xtra_shift_C1 = -0.06
  else:                       xtra_shift_C1 = 0

  ####
  ####
  ####
  ax01 = plt.subplot(gs[0, i])
  ax01.spines['right'].set_visible(False)
  ax01.spines['top'].set_visible(False)

  ax00 = inset_axes(ax01, width="100%", height="100%", loc="upper right", borderpad=0,
                    bbox_to_anchor=(.32 - 0.05 + shift + xtra_shift_C1, .35, .65, .6),
                    bbox_transform=ax01.transAxes)

  ax00cb = inset_axes(ax01, width="100%", height="100%", loc="upper right", borderpad=0,
                      bbox_to_anchor=(.9 + shift + shift_bar + xtra_shift_C1, .35, .05, .6),
                      bbox_transform=ax01.transAxes)

  ####
  ####
  ####
  ax11 = plt.subplot(gs[1, i])
  ax11.spines['right'].set_visible(False)
  ax11.spines['top'].set_visible(False)

  ax10 = inset_axes(ax11, width="100%", height="100%", loc="upper right", borderpad=0,
                    bbox_to_anchor=(.32 - 0.05 + shift, .12 + y_shift, .65, .6),
                    bbox_transform=ax11.transAxes)

  ax10cb = inset_axes(ax11, width="100%", height="100%", loc="upper right", borderpad=0,
                      bbox_to_anchor=(.9 + shift + shift_bar, .12 + y_shift, .05, .6),
                      bbox_transform=ax11.transAxes)

  ####
  ####
  ####
  ax21 = plt.subplot(gs[2, i])
  ax21.spines['right'].set_visible(False)
  ax21.spines['top'].set_visible(False)

  ax20 = inset_axes(ax21, width="100%", height="100%", loc="upper right", borderpad=0,
                    bbox_to_anchor=(.32 - 0.05 + shift, .12 + y_shift, .65, .6),
                    bbox_transform=ax21.transAxes)

  ax20cb = inset_axes(ax21, width="100%", height="100%", loc="upper right", borderpad=0,
                      bbox_to_anchor=(.9 + shift + shift_bar, .12 + y_shift, .05, .6),
                      bbox_transform=ax21.transAxes)



  ####
  #### prepare data
  ####
  beta = dataSet["beta"]
  L    = dataSet["L"]
  t    = dataSet["t"]
  J    = dataSet["J"]

  totNumData = np.sum(dataSet["numData"])

  o = int(L / 2)
  O = np.array([o, o])
  halfNumNNs = 2

  weights = np.array(dataSet["numData"])



  ####
  #### ============================[ C1 ]============================
  ####
  holeIndices = [(o, o, 0), (o, o, 1), (o, o+1, 1), (o+1, o, 0)]

  def C1_index2sites (index):
    # calculate the position of the two spins
    r0 = np.array([index[0], index[1]])
    if index[2] == 0: r1 = np.array([index[0] - 1, index[1]    ])
    else:             r1 = np.array([index[0],     index[1] - 1])

    return r0, r1, index in holeIndices

  ####
  #### draw spatial correlators
  ####
  min_val, max_val = drawSpatialCorrelations(ax00, ax01, dataSet, "C1", holeIndices, C1_index2sites, False)

  # plot radial data
  xMax = 2**0.5 * zoom + 0.2
  data = isolateData(dataSet, "C1")
  xmin, xmax = plotRadialStatistics(ax01, data, C1_index2sites, xMax, "C1")

  ####
  #### set labels etc.
  ####
  ax00.set_title(r"$ C_1 $")
  ax00.set_facecolor("black")
  if zoom:
    ax00.axis([0 - zoom, 0 + zoom, 0 - zoom, 0 + zoom])
    ax01.set_xlim(xmin - 0.1, 2**0.5 * zoom)
  else:
    ax00.axis([-2*l, L-1+2*l, -2*l, L-1+2*l])
  ax00.set_aspect("equal")
  norm = mpl.colors.Normalize(vmin=min_val, vmax=max_val)
  cb0 = mpl.colorbar.ColorbarBase(ax00cb, cmap=niceCmap(), norm=norm)



  ####
  #### ============================[ C2 ]============================
  ####
  holeIndices = [(o, o, 0), (o, o, 1), (o+1, o+1, 0), (o-1, o+1, 1)]

  def C2_index2sites (index):
    # calculate the position of the two spins
    r0 = np.array([index[0], index[1]])
    if index[2] == 0: r1 = np.array([index[0] - 1, index[1] - 1])
    else:             r1 = np.array([index[0] + 1, index[1] - 1])

    return r0, r1, index in holeIndices

  ####
  #### draw spatial correlators
  ####
  min_val, max_val = drawSpatialCorrelations(ax10, ax11, dataSet, "C2", holeIndices, C2_index2sites, True)

  # plot radial data
  xMax = 2**0.5 * zoom + 0.2
  data = isolateData(dataSet, "C2")
  xmin, xmax = plotRadialStatistics(ax11, data, C2_index2sites, xMax, "C2")

  ####
  #### set labels etc.
  ####
  ax10.set_title(r"$ C_\sqrt{2} $")
  ax10.set_facecolor("black")
  if zoom:
    ax10.axis([0 - zoom, 0 + zoom, 0 - zoom, 0 + zoom])
    ax11.set_xlim(xmin - 0.1, 2**0.5 * zoom)
  else:
    ax10.axis([-2*l, L-1+2*l, -2*l, L-1+2*l])
  ax10.set_aspect("equal")
  norm = mpl.colors.Normalize(vmin=min_val, vmax=max_val)
  cb1 = mpl.colorbar.ColorbarBase(ax10cb, cmap=niceCmap_r(), norm=norm)



  ####
  #### ============================[ C3 ]============================
  ####
  holeIndices = [(o, o, 0), (o, o, 1), ((o+2)%L, o, 0), (o, (o+2)%L, 1)]

  def C3_index2sites (index):
    # calculate the position of the two spins
    r0 = np.array([index[0], index[1]])
    if index[2] == 0: r1 = np.array([index[0] - 2, index[1]    ])
    else:             r1 = np.array([index[0]    , index[1] - 2])

    return r0, r1, index in holeIndices

  ####
  #### draw spatial correlators
  ####
  min_val, max_val = drawSpatialCorrelations(ax20, ax21, dataSet, "C3", holeIndices, C3_index2sites, True)

  # plot radial data
  xMax = 2**0.5 * zoom + 0.3
  data = isolateData(dataSet, "C3")
  xmin, xmax = plotRadialStatistics(ax21, data, C3_index2sites, xMax, "C3")

  ####
  #### set labels etc.
  ####
  ax20.set_title(r"$ C_2 $")
  ax20.set_facecolor("black")
  if zoom:
    ax20.axis([0 - zoom, 0 + zoom, 0 - zoom, 0 + zoom])
    ax21.set_xlim(xmin - 0.1, 2**0.5 * zoom)
  else:
    ax20.axis([-2*l, L-1+2*l, -2*l, L-1+2*l])
  ax20.set_aspect("equal")
  ax21.set_xlabel(r" Bond distance, $ r $ (sites)")
  norm = mpl.colors.Normalize(vmin=min_val, vmax=max_val)
  cb2 = mpl.colorbar.ColorbarBase(ax20cb, cmap=niceCmap_r(), norm=norm)



  ####
  #### fix axis
  ####
  ax01.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)
  ax11.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)
  ax21.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)
  ax00cb.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)
  ax10cb.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)
  ax20cb.ticklabel_format(axis='y', style='sci', scilimits=(-1, 0), useMathText=True)

  # hide offset text
  plt.setp(ax00cb.yaxis.get_offset_text(), visible=False)
  plt.setp(ax10cb.yaxis.get_offset_text(), visible=False)
  plt.setp(ax20cb.yaxis.get_offset_text(), visible=False)

  ax00.set_xticks([-2, 0, 2])
  ax00.set_yticks([-2, 0, 2])
  ax10.set_xticks([-2, 0, 2])
  ax10.set_yticks([-2, 0, 2])
  ax20.set_xticks([-2, 0, 2])
  ax20.set_yticks([-2, 0, 2])

  if beta == 22:
    cb0.set_ticks([-0.16, -0.12])
    cb2.set_ticks([-0.03, 0.02])


  ####
  #### enumerate axes
  ####
  axLabels = ["a", "b", "c"] if beta != 88 else ["d", "e", "f"]
  for n, ax in enumerate([ax01, ax11, ax21]):
    ax.text(-0.15, 1.05, axLabels[n] + "", transform=ax.transAxes, size=axLabelSize, weight="bold")


plt.show()